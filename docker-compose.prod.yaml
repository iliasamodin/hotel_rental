version: "3"

services:
  hotel_rental_db:
    image: postgres:17
    container_name: hotel_rental_db
    env_file: 
      - .env
    ports: 
      - ${HOST_MACHINE_DB_PORT}:${DB_PORT}
    volumes:
      - ${PATH_OF_BIND_MOUNT}/hotel_rental_db:/var/lib/postgresql/data
    networks:
      - hotel_rental_network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 10s
      timeout: 10s
      retries: 3

  hotel_rental_redis:
    image: redis:7
    container_name: hotel_rental_redis
    ports:
      - ${HOST_MACHINE_REDIS_PORT}:${REDIS_PORT}
    volumes:
      - ${PATH_OF_BIND_MOUNT}/hotel_rental_redis:/data
    networks:
      - hotel_rental_network
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 10s
      retries: 3

  hotel_rental_init_app:
    build: .
    image: hotel_rental
    container_name: hotel_rental_init_app
    env_file: 
      - .env
    environment:
      DB_HOST: hotel_rental_db
    volumes:
      - ${PATH_OF_BIND_MOUNT}/hotel_rental_app:/logs
    networks:
      - hotel_rental_network
    depends_on:
      hotel_rental_db:
        condition: service_healthy
      hotel_rental_redis:
        condition: service_healthy
    command: poetry run alembic upgrade head

  hotel_rental_app:
    build: .
    image: hotel_rental
    container_name: hotel_rental_app
    env_file: 
      - .env
    environment:
      DB_HOST: hotel_rental_db
      REDIS_HOST: hotel_rental_redis
      CACHING: 1
      ENABLE_METRICS: 1
    ports:
      - ${PORT}:${PORT}
    volumes:
      - ${PATH_OF_BIND_MOUNT}/hotel_rental_app:/logs
    networks:
      - hotel_rental_network
    restart: always
    depends_on:
      hotel_rental_db:
        condition: service_healthy
      hotel_rental_redis:
        condition: service_healthy
      hotel_rental_init_app:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "-f", "http://${HOST}:${PORT}/admin"]
      interval: 10s
      timeout: 10s
      retries: 3

  hotel_rental_celery:
    build: .
    image: hotel_rental
    container_name: hotel_rental_celery
    env_file: 
      - .env
    environment:
      DB_HOST: hotel_rental_db
      REDIS_HOST: hotel_rental_redis
      CACHING: 1
    networks:
      - hotel_rental_network
    restart: always
    depends_on:
      hotel_rental_db:
        condition: service_healthy
      hotel_rental_redis:
        condition: service_healthy
      hotel_rental_app:
        condition: service_healthy
    command: poetry run celery -A app.utils.celery.celery_app:celery_app worker -B --loglevel=${LOG_LEVEL}

  hotel_rental_flower:
    build: .
    image: hotel_rental
    container_name: hotel_rental_flower
    env_file: 
      - .env
    environment:
      REDIS_HOST: hotel_rental_redis
    ports:
      - ${HOST_MACHINE_FLOWER_PORT}:${FLOWER_PORT}
    networks:
      - hotel_rental_network
    restart: always
    depends_on:
      hotel_rental_redis:
        condition: service_healthy
    command: poetry run celery -A app.utils.celery.celery_app:celery_app flower --port=${FLOWER_PORT}

  hotel_rental_prometheus:
    image: prom/prometheus:v3.1.0
    container_name: hotel_rental_prometheus
    env_file: 
      - .env
    ports:
      - ${HOST_MACHINE_PROMETHEUS_PORT}:${PROMETHEUS_PORT}
    volumes:
      - ${PATH_OF_BIND_MOUNT}/hotel_rental_prometheus:/prometheus
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - hotel_rental_network
    restart: always
    depends_on:
      hotel_rental_app:
        condition: service_healthy

  hotel_rental_grafana:
    image: grafana/grafana:11.5.0
    container_name: hotel_rental_grafana
    env_file: 
      - .env
    ports:
      - ${HOST_MACHINE_GRAFANA_PORT}:${GRAFANA_PORT}
    volumes:
      - ${PATH_OF_BIND_MOUNT}/hotel_rental_grafana:/var/lib/grafana
    networks:
      - hotel_rental_network
    restart: always
    depends_on:
      hotel_rental_app:
        condition: service_healthy

networks:
  hotel_rental_network:
    name: hotel_rental_network
